version: "3.9"

networks:
  patroniflow:

services:
  etcd1: &etcd
    image: ${PATRONI_TEST_IMAGE:-patroni}
    networks: [ patroniflow ]
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: tutorial
      ETCD_UNSUPPORTED_ARCH: arm64
    container_name: etcd1
    hostname: etcd1
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
    <<: *etcd
    container_name: etcd2
    hostname: etcd2
    command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  etcd3:
    <<: *etcd
    container_name: etcd3
    hostname: etcd3
    command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380

  haproxy:
    image: ${PATRONI_TEST_IMAGE:-patroni}
    networks: [ patroniflow ]
    env_file: docker/patroni.env
    hostname: haproxy
    container_name: haproxy
    ports:
      - "5000:5000"
      - "5001:5001"
    command: haproxy
    environment: &haproxy_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
      PATRONI_SCOPE: patroniflow
      PGDATA: "/var/lib/postgresql/data/pgdata"
      STEAMDB_VERSION: "1.0.0"
      USERS: "misha,egor,andrey,denis"
      QUERY_ATTEMPTS: 1000
      BACKUPS_ALLOWED: 5
      BACKUP_FREQUENCY: 10
    volumes:
      - ./analysis:/analysis/
      - ./backup:/backup/
      - ./partitioning:/partitioning/
      - ./migrations:/migrations/
      - ./migrations/init.sh:/docker-entrypoint-initdb.d/init.sh

  patroni1:
    image: ${PATRONI_TEST_IMAGE:-patroni}
    networks: [ patroniflow ]
    env_file: docker/patroni.env
    hostname: patroni1
    container_name: patroni1
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni1
    volumes:
      - ./analysis:/analysis/
      - ./backup:/backup/
      - ./partitioning:/partitioning/
      - ./migrations:/migrations/
      - ./migrations/init.sh:/docker-entrypoint-initdb.d/init.sh

  patroni2:
    image: ${PATRONI_TEST_IMAGE:-patroni}
    networks: [ patroniflow ]
    env_file: docker/patroni.env
    hostname: patroni2
    container_name: patroni2
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni2
    volumes:
      - ./analysis:/analysis/
      - ./backup:/backup/
      - ./partitioning:/partitioning/
      - ./migrations:/migrations/
      - ./migrations/init.sh:/docker-entrypoint-initdb.d/init.sh

  grafana:
    image: grafana/grafana
    networks: [ patroniflow ]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - 3000:3000
    volumes:
      - grafana-storage:/var/lib/grafana

  prometheus:
    image: prom/prometheus
    networks: [ patroniflow ]
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    networks: [ patroniflow ]
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@haproxy:5000/postgres?sslmode=disable"
    links:
      - haproxy
      - prometheus

volumes:
  grafana-storage:

